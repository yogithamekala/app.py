# -*- coding: utf-8 -*-
"""handson10/22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LFClt-KTULOAPjNOoM57UFJbZ_COos2F
"""

import torch
from torchvision import models, transforms
from PIL import Image

# Load a pre-trained ResNet model
model = models.resnet50(pretrained=True)
model.eval()

# Image transformation pipeline
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

def preprocess_image(image_path):
    image = Image.open(image_path)
    image = transform(image).unsqueeze(0)
    return image

# Test with a sample image
image_tensor = preprocess_image("/content/nature.jpg")
with torch.no_grad():
    output = model(image_tensor)
    _, predicted = torch.max(output, 1)

print(f"Predicted Class: {predicted.item()}")

import streamlit as st
import torch
from torchvision import models, transforms
from PIL import Image

# Load a pre-trained model (e.g., ResNet)
model = models.resnet50(pretrained=True)
model.eval()

# Define a function to preprocess the image
def preprocess_image(image):
    transform = transforms.Compose([
        transforms.Resize(256),
        transforms.CenterCrop(224),
        transforms.ToTensor(),
        transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
    ])
    image = transform(image).unsqueeze(0)  # Add batch dimension
    return image

# Streamlit app
st.title("Image Classification App")

# Upload image
uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])
if uploaded_file is not None:
    image = Image.open(uploaded_file)  # Open the uploaded image directly
    image_tensor = preprocess_image(image)  # Process the uploaded image

    with torch.no_grad():
        output = model(image_tensor)
        _, predicted = torch.max(output, 1)
    st.write(f"Predicted Class: {predicted.item()}")

# Specify your required packages
requirements = """
streamlit
torch
torchvision
transformers
tensorflow
pillow
"""

# Write the requirements to a text file
with open("requirements.txt", "w") as f:
    f.write(requirements.strip())