# -*- coding: utf-8 -*-
"""handson10/22.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1LFClt-KTULOAPjNOoM57UFJbZ_COos2F
"""

import torch
from torchvision import models, transforms
from PIL import Image

# Load a pre-trained ResNet model
model = models.resnet50(pretrained=True)
model.eval()

# Image transformation pipeline
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

def preprocess_image(image_path):
    image = Image.open(image_path)
    image = transform(image).unsqueeze(0)
    return image

# Test with a sample image
image_tensor = preprocess_image("/content/nature.jpg")
with torch.no_grad():
    output = model(image_tensor)
    _, predicted = torch.max(output, 1)

print(f"Predicted Class: {predicted.item()}")

import streamlit as st
import torch
from torchvision import models, transforms
from PIL import Image
from transformers import pipeline

# Load ResNet model for image classification
model = models.resnet50(pretrained=True)
model.eval()

# Summarizer model from Hugging Face
summarizer = pipeline('summarization')

# Image transformation
transform = transforms.Compose([
    transforms.Resize(256),
    transforms.CenterCrop(224),
    transforms.ToTensor(),
    transforms.Normalize(mean=[0.485, 0.456, 0.406], std=[0.229, 0.224, 0.225]),
])

# Preprocess image
def preprocess_image(image):
    image = Image.open(image)
    image = transform(image).unsqueeze(0)
    return image

# Summarize text
def summarize_text(text):
    summary = summarizer(text, max_length=50, min_length=25, do_sample=False)
    return summary[0]['summary_text']

# Streamlit App
st.title("Deep Learning & LLM Demo App")

# Image upload for image classification
uploaded_image = st.file_uploader("Upload an image", type=["jpg", "png", "jpeg"])
if uploaded_image is not None:
    st.image(uploaded_image, caption='Uploaded Image.', use_column_width=True)
    image_tensor = preprocess_image(uploaded_image)

    # Perform image classification
    with torch.no_grad():
        output = model(image_tensor)
        _, predicted = torch.max(output, 1)

    st.write(f"Predicted Class: {predicted.item()}")

# Text area for summarization
user_input = st.text_area("Enter text for summarization")
if user_input:
    summary = summarize_text(user_input)
    st.write("Summary:", summary)

# Specify your required packages
requirements = """
streamlit
torch
torchvision
transformers
tensorflow
pillow
"""

# Write the requirements to a text file
with open("requirements.txt", "w") as f:
    f.write(requirements.strip())